{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","Hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAqBeA,EAnBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,cADJ,mBAClCC,EADkC,KACtBC,EADsB,KAYzC,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAKd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCMZG,EATK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAChC,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAKGG,MAAMR,GALT,cAKfS,EALe,gBAMEA,EAAUC,OANZ,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAXhB,kBAcdY,GAdc,4CAAH,sDCuBLK,EAlBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KASxC,OAJAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAET,KAAMY,EAAML,SAAS,SAChE,CAACb,IAEGc,EDJkBK,CAAanB,GAA9BM,EAHwB,EAGxBA,KAAKO,EAHmB,EAGnBA,QAEb,OACE,oCACE,4BAAKb,GACJa,GAAW,uCACZ,yBAAKjB,UAAU,aACZU,EAAKE,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,eAAaW,IAAKX,EAAIhB,IAAQgB,UEIzBY,EAjBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,cADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACG4C,EAAWd,KAAI,SAACR,GACf,OAAO,kBAAC,EAAD,CAASA,SAAUA,EAAUoB,IAAKpB,U,MCRnDuB,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U","file":"static/js/main.f89fa7fa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"Hola Mundo\");\r\n  const handleInputchange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputchange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=0yYXb6IQkrAaEUvWht0ln0CY3WPGlW81`;\r\n\r\n  const respuesta = await fetch(url);\r\n  const { data } = await respuesta.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nimport { useFetchGifs } from \"../Hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n\r\n  const { data,loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p>Loadings</p>}\r\n      <div className=\"card-grid\">\r\n        {data.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => setstate({ data: imgs, loading: false }));\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid category={category} key={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./components/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <GifExpertApp />,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}